#!/usr/bin/node
var cp = require('child_process');
var fs = require('fs');
var net = require('net');
var daemons = [];
//if (process.pid == 1) {
console.log('Welcome to Lenux v1.0.2!');
console.log('Initializing daemons...');
fs.readdir('/etc/init', function(err, data) {
  if (err) {
    console.log('ERROR: MISSING INIT DIRECTORY OR NOT READABLE');
    console.log('UNRECOVERABLE: ENTERING INFINITE LOOP');
    while(true);
  }
  else {
    for (var i = 0; i < data.length; i++) {
      var files = data;
      console.log('Starting ' + files[i] + '...');
      fs.readFile('/etc/init/' + files[i], function(err, data) {
        if (err) {
          console.log('WARNING: Could not read initfile ' + files[i] + ', skipping');
        }
        else {
          var progargs = data.toString().split('\n')[0].split(' ');
          var progname = progargs.shift();
          var program = cp.spawn(progname, progargs);
          program.on('error', function(err) {
            console.log('WARNING: Error executing daemon ' + files[i] + ', skipping');
          });
          program.on('close', function() {
            program = cp.spawn(progname, progargs);
          });
          daemons[files[i]] = program;
        }
      });
    }
    console.log('Daemons initialized, Use serial terminal to interact with system.');
  }
});
fs.unlink('/etc/init.sock', function(err) {
  net.createServer(function(socket) {
    socket.on('data', function(data) {
      var command = JSON.parse(data);
      if (command.op == 'start') {
        fs.readFile('/etc/init/' + command.daemon, function(err, data) {
          if (err) {
            console.log('WARNING: Could not read initfile ' + command.daemon + ', skipping');
          }
          else {
            var program = cp.spawn(data.toString().split('\n')[0]);
            daemons[command.daemon] = program;
            program.on('error', function(err) {
              console.log('WARNING: could not execute daemon, skipping');
            });
          }
        });
      }
      if (command.op == 'stop') {
        daemons[command.daemon].kill('SIGINT');
      }
    });
  }).listen('/etc/init.sock');
});
//}
//else {
//  console.log('PID is not 1, init must be started by kernel on boot.');
//}
