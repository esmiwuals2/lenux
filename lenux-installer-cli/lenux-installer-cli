#!/usr/bin/env node
var prompt = require('prompt');
var cp = require('child_process');
function home() {
  console.log('Welcome to the Lenux Installer!\n');
  console.log('This application will guide you through the installation of a Lenux system. After you\'ve finished reading a section, type n, or type b to go back.\n');
  prompt.get({properties: {command: {description: 'Type a command'}}}, function (err, result) {
    if (result.command == 'n') {
      partition();
    }
    else if (result.command == 'b') {
      console.log('You can\'t go backwards here!');
      home();
    }
    else {
      console.log('I don\'t understand.');
      home();
    }
  });
}
function partition() {
  console.log('Create a partition\n');
  console.log('A partition is like a slice of a disk, dedicated to a certain task. Each partition can be formatted however you like. For example, the Windows C: drive is a partition of type NTFS.\n');
  console.log('A partition must be created to contain your Lenux system. It will be of type EXT4.\n');
  console.log('This will be created using a utility called fdisk. It is very simple to use, and always warns you if your actions will be harmful or destructive.\n');
  prompt.get({properties: {command: {description: 'Type a command'}}}, function (err, result) {
    if (result.command == 'n') {
      fdisk();
    }
    else if (result.command == 'b') {
      home();
    }
    else {
      console.log('I don\'t understand.');
      partition();
    }
  });
}
function fdisk() {
  console.log('fdisk\n');
  console.log('Type f to start fdisk if its not already running. Type e to create an EXT4 filesystem. Type l to list disks.\n');
  console.log('To wipe a disk and install only Lenux:\n');
  console.log('Type f');
  console.log('Type the path to the disk you wish to install Lenux on');
  console.log('type o');
  console.log('type n');
  console.log('type ENTER (remember the number it says here, you need it for the next few sections, and step 10)');
  console.log('type ENTER');
  console.log('type ENTER');
  console.log('type ENTER');
  console.log('type w');
  console.log('type e and create an EXT4 filesystem on the partition you just made.\n');
  console.log('To install Lenux alongside another OS:\n');
  console.log('Type l. Ensure that under the disk you want, the disklabel type is dos');
  console.log('Type f');
  console.log('Type the path to the disk you wish to install Lenux on');
  console.log('Type d to delete a partition that you want to resize (don\'t worry, this won\'t actually delete the files on it)');
  console.log('Type n to recreate the partition as a different size.');
  console.log('Go up to step 4 of "wipe a disk and install only lenux"');
  prompt.get({properties: {command: {description: 'Type a command'}}}, function (err, result) {
    if (result.command == 'n') {
      mount();
    }
    else if (result.command == 'b') {
      partition();
    }
    else if (result.command == 'f') {
      prompt.get({properties: {disk: {description: 'Type disk device filename'}}}, function (err, result) {
        var fdiskp = cp.spawn('fdisk', [result.disk]);
        fdiskp.stdout.on('data', function(data) {
          process.stdout.write(data);
        });
        fdiskp.stderr.on('data', function(data) {
          process.stderr.write(data);
        });
        process.stdin.pipe(fdiskp.stdin);
        fdiskp.on('exit', function() {
          fdisk();
        });
      });
    }
    else if (result.command == 'l') {
      var fdiskp = cp.spawn('fdisk', ['-l']);
      fdiskp.stdout.on('data', function(data) {
        process.stdout.write(data);
      });
      fdiskp.stderr.on('data', function(data) {
        process.stderr.write(data);
      });
      fdiskp.on('exit', function() {
        fdisk();
      });
    }
    else if (result.command == 'e') {
      prompt.get({properties: {partition: {description: 'Type partition filename'}}}, function (err, result) {
        console.log('Creating EXT4 filesystem...');
        var mkfs = cp.spawn('mkfs.ext4', [result.partition]);
        mkfs.on('exit', function(code, signal) {
          if (code === 0) {
            console.log('Success! Type n.');
            fdisk();
          }
          else {
            console.log('Error creating EXT4 filesystem!');
            fdisk();
          }
        });
      });
    }
    else {
      console.log('I don\'t understand.');
      fdisk();
    }
  });
}
function mount() {
  console.log('Mount Filesystems\n');
  console.log('Type m to mount the filesystems.\n');
  prompt.get({properties: {command: {description: 'Type a command'}}}, function (err, result) {
    if (result.command == 'n') {
      install();
    }
    else if (result.command == 'b') {
      fdisk();
    }
    else if (result.command == 'm') {
      prompt.get({properties: {partition: {description: 'Type partition filename'}}}, function (err, result) {
        console.log('Mounting Lenux Filesystem...');
        var mountlenux = cp.spawn('/bin/mount', [result.partition, '/mnt/lenux']);
        mountlenux.on('exit', function(code, signal) {
          if (code === 0) {
            console.log('Success! Type n.');
            mount();
          }
          else {
            console.log('Error mounting Lenux Filesystem!');
            mount();
          }
        });
      });
    }
    else {
      console.log('I don\'t understand.');
      mount();
    }
  });
}
function install() {
  console.log('Install base system\n');
  console.log('Now it\'s time to install the system! Type i to start the installation!');
  prompt.get({properties: {command: {description: 'Type a command'}}}, function (err, result) {
    if (result.command == 'n') {
      grub();
    }
    else if (result.command == 'b') {
      mount();
    }
    else if (result.command == 'i') {
      console.log('Creating directory hierarchy...');
      var mkdir = cp.spawn('/bin/mkdir', ['/mnt/lenux/boot', '/mnt/lenux/boot/grub', '/mnt/lenux/proc', '/mnt/lenux/sys', '/mnt/lenux/dev', '/mnt/lenux/run', '/mnt/lenux/tmp', '/mnt/lenux/usr', '/mnt/lenux/usr/bin', '/mnt/lenux/usr/sbin', '/mnt/lenux/usr/share', '/mnt/lenux/usr/lib', '/mnt/lenux/mnt', '/mnt/lenux/etc', '/mnt/lenux/etc/skel', '/mnt/lenux/root', '/mnt/lenux/home']);
      mkdir.on('exit', function(code, signal) {
        if (code === 0) {
          console.log('Creating symlinks...');
          var binlink = cp.spawn('/bin/ln', ['-s', 'usr/bin', '/mnt/lenux/bin']);
          binlink.on('exit', function(code, signal) {
            if (code === 0) {
              var sbinlink = cp.spawn('/bin/ln', ['-s', 'usr/sbin', '/mnt/lenux/sbin']);
              sbinlink.on('exit', function(code, signal) {
                if (code === 0) {
                  var liblink = cp.spawn('/bin/ln', ['-s', 'usr/lib', '/mnt/lenux/lib']);
                  liblink.on('exit', function(code, signal) {
                    if (code === 0) {
                      console.log('Installing kernel...');
                      var kernel = cp.spawn('/bin/cp', ['/lenux/vmlinuz-4.19.0-11-686-pae', '/mnt/lenux/boot']);
                      kernel.on('exit', function(code, signal) {
                        if (code === 0) {
                          console.log('Installing initrd...');
                          var initrd = cp.spawn('/bin/cp', ['/lenux/initrd.img-4.19.0-11-686-pae', '/mnt/lenux/boot']);
                          initrd.on('exit', function(code, signal) {
                            if (code === 0) {
                              console.log('Installing GRUB config file...');
                              var grubconf = cp.spawn('/bin/cp', ['/lenux/grub.cfg', '/mnt/lenux/boot/grub/grub.cfg']);
                              grubconf.on('exit', function(code, signal) {
                                if (code === 0) {
                                  console.log('Installing node...');
                                  var node = cp.spawn('/bin/cp', ['/lenux/hello', '/mnt/lenux/bin/hello']);
                                  node.on('exit', function(code, signal) {
                                    if (code === 0) {
                                      console.log('Installing the shell...');
                                      var sh = cp.spawn('/bin/cp', ['/lenux/sh', '/mnt/lenux/bin/sh']);
                                      sh.on('exit', function(code, signal) {
                                        if (code === 0) {
                                          console.log('Installing init...');
                                          var init = cp.spawn('/bin/cp', ['/lenux/init.js', '/mnt/lenux/lib/init.js']);
                                          init.on('exit', function(code, signal) {
                                            if (code === 0) {
                                              console.log('Success! Type n.');
                                              install();
                                            }
                                            else {
                                              console.log('Error installing the bourne shell!');
                                              install();
                                            }
                                          });
                                        }
                                        else {
                                          console.log('Error installing the shell!');
                                          install();
                                        }
                                      });
                                    }
                                    else {
                                      console.log('Error installing node!');
                                      install();
                                    }
                                  });
                                }
                                else {
                                  console.log('Error installing GRUB config file!');
                                  install();
                                }
                              });
                            }
                            else {
                              console.log('Error installing initrd!');
                              install();
                            }
                          });
                        }
                        else {
                          console.log('Error installing kernel!');
                          install();
                        }
                      });
                    }
                    else {
                      console.log('Error creating symlinks!');
                      install();
                    }
                  });
                }
                else {
                  console.log('Error creating symlinks!');
                  install();
                }
              });
            }
            else {
              console.log('Error creating symlinks!');
              install();
            }
          });
        }
        else {
          console.log('Error creating directory hierarchy!');
          install();
        }
      });
    }
    else {
      console.log('I don\'t understand.');
      install();
    }
  });
}
function grub() {
  console.log('Install Grub\n');
  console.log('Almost done! To make the operating system bootable, We need to install a bootloader. It\'s job is to load the kernel, and pass control to it. Lenux (and many other kinds of Linux), use GRUB as their bootloader. Type g to install GRUB.\n');
  prompt.get({properties: {command: {description: 'Type a command'}}}, function (err, result) {
    if (result.command == 'n') {
      done();
    }
    else if (result.command == 'b') {
      install();
    }
    else if (result.command == 'g') {
      prompt.get({properties: {disk: {description: 'Type disk device filename'}}}, function (err, result) {
        var grubinstall = cp.spawn('/sbin/grub-install', ['--boot-directory=/mnt/lenux/boot', '--target=i386-pc', result.disk]);
        grubinstall.stdout.on('data', function(data) {
          process.stdout.write(data);
        });
        grubinstall.stderr.on('data', function(data) {
          process.stderr.write(data);
        });
        grubinstall.on('exit', function(code, signal) {
          if (code === 0) {
            console.log('Success! Type n.');
            grub();
          }
          else {
            console.log('Error installing GRUB!');
            grub();
          }
        });
      });
    }
    else {
      console.log('I don\'t understand.');
      grub();
    }
  });
}
function done() {
  console.log('All Done!\n');
  console.log('Lenux has been installed! Go back and redo a section, or type r to reboot. Make sure you remove the installation media, otherwise you\'ll boot back into this installer!\n');
  console.log('Errors, questions, or comments? They can be reported at https://github.com/thecoder08/lenux/issues.');
  prompt.get({properties: {command: {description: 'Type a command'}}}, function (err, result) {
    if (result.command == 'n') {
      console.log('You can\'t go foreward here!');
      done();
    }
    else if (result.command == 'b') {
      grub();
    }
    else if (result.command == 'r') {
      cp.spawn('reboot');
      done();
    }
    else {
      console.log('I don\'t understand.');
      done();
    }
  });
}
home();
